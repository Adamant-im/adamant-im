var Q=Object.defineProperty;var R=(n,e,r)=>e in n?Q(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r;var c=(n,e,r)=>R(n,typeof e!="symbol"?e+"":e,r);var J;import{c as N,a as K,e as G,d as H,D as W,b as M,f as Z,g as L}from"./digest-C5XOsEU3.js";function X(n,e){if(n.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),t=0;t<r.length;t++)r[t]=255;for(var s=0;s<n.length;s++){var o=n.charAt(s),a=o.charCodeAt(0);if(r[a]!==255)throw new TypeError(o+" is ambiguous");r[a]=s}var h=n.length,d=n.charAt(0),S=Math.log(h)/Math.log(256),l=Math.log(256)/Math.log(h);function D(i){if(i instanceof Uint8Array||(ArrayBuffer.isView(i)?i=new Uint8Array(i.buffer,i.byteOffset,i.byteLength):Array.isArray(i)&&(i=Uint8Array.from(i))),!(i instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(i.length===0)return"";for(var u=0,A=0,b=0,y=i.length;b!==y&&i[b]===0;)b++,u++;for(var g=(y-b)*l+1>>>0,p=new Uint8Array(g);b!==y;){for(var m=i[b],C=0,w=g-1;(m!==0||C<A)&&w!==-1;w--,C++)m+=256*p[w]>>>0,p[w]=m%h>>>0,m=m/h>>>0;if(m!==0)throw new Error("Non-zero carry");A=C,b++}for(var x=g-A;x!==g&&p[x]===0;)x++;for(var P=d.repeat(u);x<g;++x)P+=n.charAt(p[x]);return P}function U(i){if(typeof i!="string")throw new TypeError("Expected String");if(i.length===0)return new Uint8Array;var u=0;if(i[u]!==" "){for(var A=0,b=0;i[u]===d;)A++,u++;for(var y=(i.length-u)*S+1>>>0,g=new Uint8Array(y);i[u];){var p=r[i.charCodeAt(u)];if(p===255)return;for(var m=0,C=y-1;(p!==0||m<b)&&C!==-1;C--,m++)p+=h*g[C]>>>0,g[C]=p%256>>>0,p=p/256>>>0;if(p!==0)throw new Error("Non-zero carry");b=m,u++}if(i[u]!==" "){for(var w=y-b;w!==y&&g[w]===0;)w++;for(var x=new Uint8Array(A+(y-w)),P=A;w!==y;)x[P++]=g[w++];return x}}}function F(i){var u=U(i);if(u)return u;throw new Error(`Non-${e} character`)}return{encode:D,decodeUnsafe:U,decode:F}}var Y=X,_=Y;class ee{constructor(e,r,t){c(this,"name");c(this,"prefix");c(this,"baseEncode");this.name=e,this.prefix=r,this.baseEncode=t}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class re{constructor(e,r,t){c(this,"name");c(this,"prefix");c(this,"baseDecode");c(this,"prefixCodePoint");this.name=e,this.prefix=r;const s=r.codePointAt(0);if(s===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=s,this.baseDecode=t}decode(e){if(typeof e=="string"){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(e){return O(this,e)}}class te{constructor(e){c(this,"decoders");this.decoders=e}or(e){return O(this,e)}decode(e){const r=e[0],t=this.decoders[r];if(t!=null)return t.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}function O(n,e){return new te({...n.decoders??{[n.prefix]:n},...e.decoders??{[e.prefix]:e}})}class ne{constructor(e,r,t,s){c(this,"name");c(this,"prefix");c(this,"baseEncode");c(this,"baseDecode");c(this,"encoder");c(this,"decoder");this.name=e,this.prefix=r,this.baseEncode=t,this.baseDecode=s,this.encoder=new ee(e,r,t),this.decoder=new re(e,r,s)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}function j({name:n,prefix:e,encode:r,decode:t}){return new ne(n,e,r,t)}function z({name:n,prefix:e,alphabet:r}){const{encode:t,decode:s}=_(r,n);return j({prefix:e,name:n,encode:t,decode:o=>N(s(o))})}function se(n,e,r,t){const s={};for(let l=0;l<e.length;++l)s[e[l]]=l;let o=n.length;for(;n[o-1]==="=";)--o;const a=new Uint8Array(o*r/8|0);let h=0,d=0,S=0;for(let l=0;l<o;++l){const D=s[n[l]];if(D===void 0)throw new SyntaxError(`Non-${t} character`);d=d<<r|D,h+=r,h>=8&&(h-=8,a[S++]=255&d>>h)}if(h>=r||255&d<<8-h)throw new SyntaxError("Unexpected end of data");return a}function oe(n,e,r){const t=e[e.length-1]==="=",s=(1<<r)-1;let o="",a=0,h=0;for(let d=0;d<n.length;++d)for(h=h<<8|n[d],a+=8;a>r;)a-=r,o+=e[s&h>>a];if(a!==0&&(o+=e[s&h<<r-a]),t)for(;o.length*r&7;)o+="=";return o}function v({name:n,prefix:e,bitsPerChar:r,alphabet:t}){return j({prefix:e,name:n,encode(s){return oe(s,t,r)},decode(s){return se(s,t,r,n)}})}const V=v({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5});v({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),v({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),v({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),v({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),v({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),v({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),v({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),v({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});const $=z({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"});z({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});const E=z({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"});z({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});function T(n,e){const{bytes:r,version:t}=n;switch(t){case 0:return ae(r,k(n),e??E.encoder);default:return ce(r,k(n),e??V.encoder)}}const q=new WeakMap;function k(n){const e=q.get(n);if(e==null){const r=new Map;return q.set(n,r),r}return e}class f{constructor(e,r,t,s){c(this,"code");c(this,"version");c(this,"multihash");c(this,"bytes");c(this,"/");c(this,J,"CID");this.code=r,this.version=e,this.multihash=t,this.bytes=s,this["/"]=s}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{const{code:e,multihash:r}=this;if(e!==I)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(r.code!==he)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return f.createV0(r)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{const{code:e,digest:r}=this.multihash,t=K(e,r);return f.createV1(this.code,t)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(e){return f.equals(this,e)}static equals(e,r){const t=r;return t!=null&&e.code===t.code&&e.version===t.version&&G(e.multihash,t.multihash)}toString(e){return T(this,e)}toJSON(){return{"/":T(this)}}link(){return this}[(J=Symbol.toStringTag,Symbol.for("nodejs.util.inspect.custom"))](){return`CID(${this.toString()})`}static asCID(e){if(e==null)return null;const r=e;if(r instanceof f)return r;if(r["/"]!=null&&r["/"]===r.bytes||r.asCID===r){const{version:t,code:s,multihash:o,bytes:a}=r;return new f(t,s,o,a??B(t,s,o.bytes))}else if(r[fe]===!0){const{version:t,multihash:s,code:o}=r,a=H(s);return f.create(t,o,a)}else return null}static create(e,r,t){if(typeof r!="number")throw new Error("String codecs are no longer supported");if(!(t.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(e){case 0:{if(r!==I)throw new Error(`Version 0 CID must use dag-pb (code: ${I}) block encoding`);return new f(e,r,t,t.bytes)}case 1:{const s=B(e,r,t.bytes);return new f(e,r,t,s)}default:throw new Error("Invalid version")}}static createV0(e){return f.create(0,I,e)}static createV1(e,r){return f.create(1,e,r)}static decode(e){const[r,t]=f.decodeFirst(e);if(t.length!==0)throw new Error("Incorrect length");return r}static decodeFirst(e){const r=f.inspectBytes(e),t=r.size-r.multihashSize,s=N(e.subarray(t,t+r.multihashSize));if(s.byteLength!==r.multihashSize)throw new Error("Incorrect length");const o=s.subarray(r.multihashSize-r.digestSize),a=new W(r.multihashCode,r.digestSize,o,s);return[r.version===0?f.createV0(a):f.createV1(r.codec,a),e.subarray(r.size)]}static inspectBytes(e){let r=0;const t=()=>{const[D,U]=Z(e.subarray(r));return r+=U,D};let s=t(),o=I;if(s===18?(s=0,r=0):o=t(),s!==0&&s!==1)throw new RangeError(`Invalid CID version ${s}`);const a=r,h=t(),d=t(),S=r+d,l=S-a;return{version:s,codec:o,multihashCode:h,digestSize:d,multihashSize:l,size:S}}static parse(e,r){const[t,s]=ie(e,r),o=f.decode(s);if(o.version===0&&e[0]!=="Q")throw Error("Version 0 CID string must not include multibase prefix");return k(o).set(t,e),o}}function ie(n,e){switch(n[0]){case"Q":{const r=e??E;return[E.prefix,r.decode(`${E.prefix}${n}`)]}case E.prefix:{const r=e??E;return[E.prefix,r.decode(n)]}case V.prefix:{const r=e??V;return[V.prefix,r.decode(n)]}case $.prefix:{const r=e??$;return[$.prefix,r.decode(n)]}default:{if(e==null)throw Error("To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided");return[n[0],e.decode(n)]}}}function ae(n,e,r){const{prefix:t}=r;if(t!==E.prefix)throw Error(`Cannot string encode V0 in ${r.name} encoding`);const s=e.get(t);if(s==null){const o=r.encode(n).slice(1);return e.set(t,o),o}else return s}function ce(n,e,r){const{prefix:t}=r,s=e.get(t);if(s==null){const o=r.encode(n);return e.set(t,o),o}else return s}const I=112,he=18;function B(n,e,r){const t=L(n),s=t+L(e),o=new Uint8Array(s+r.byteLength);return M(n,o,0),M(e,o,t),o.set(r,s),o}const fe=Symbol.for("@ipld/js-cid/CID");export{f as CID,T as format};
